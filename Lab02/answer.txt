Question 1: If you create a constructor method to build a DVD by title then create a 
            constructor method to build a DVD by category. Does JAVA allow you to do this?
-> Answer:  No, Java does not allow this because both constructors have the same parameter type and count, leading to ambiguity, even if the parameter names is different . The compiler cannot determine whether the argument represents a title or a category, resulting in a compilation error. 

Question 2: Is JAVA a Pass by Value or a Pass by Reference programming language?
-> Answer:  Java is pass by value for both primitive types and object references


Question 3:
● After the call of swap(jungleDVD, cinderellaDVD) why does the title of these two objects still remain?
-> Answer:  
	-In Java, arguments are passed by value, including object references. When calling swap(jungleDVD, cinderellaDVD), Java passes copies of the references (not the actual objects).
	-Inside the swap method, the parameters o1 and o2 are local copies of jungleDVD and cinderellaDVD. Swapping o1 and o2 only affects these local copies, not the original references in main.
	-Since the original jungleDVD and cinderellaDVD references in main remain unchanged, their titles also remain the same.
● After the call of changeTitle(jungleDVD, cinderellaDVD.getTitle()) why is the title of the JungleDVD changed?
-> Answer:  
	-The method changeTitle(DigitalVideoDisc dvd, String title) receives a copy of the reference to jungleDVD.
	-dvd.setTitle(title) modifies the actual object that dvd refers to, so jungleDVD’s title is updated to "Cinderella".
	-However, dvd = new DigitalVideoDisc(oldTitle); only changes the local reference dvd to point to a new object. This does not affect jungleDVD in main, since dvd was just a copy of the reference.